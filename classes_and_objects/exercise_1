"""This module contains three classes that represent a rectangle,
a circle, and a point. The module also contains three functions:
- A function that checks whether a point is in a circle or not.
- A function that checks whether a rectangle is in a circle or not.
- A function that checks whether a rectangle and a circle overlap.
"""
import math
import copy

class Point:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y

class Circle:
    def __init__(self, x=0, y=0, radius=0):
        self.center = Point(x, y)
        self.radius = radius

class Rectangle:
    def __init__(self, x=0, y=0, width=0, height=0):
        self.width = width
        self.height = height
        self.corner = Point(x, y)

def pythagorean_theorem(A, B):
    return math.sqrt((A)**2 + (B)**2)

def point_in_circle(point_obj, circle_obj):
    x_A = circle_obj.center.x
    x_B = point_obj.x
    y_A = circle_obj.center.y
    y_B = point_obj.y

    C = pythagorean_theorem((x_A - x_B), (y_A - y_B))

    if C <= circle_obj.radius:
        return True
    else:
        return False

def rect_in_circle(rectangle_obj, circle_obj):

    C = pythagorean_theorem(rectangle_obj.width, rectangle_obj.height)

    if C <= (circle_obj.radius * 2):
        return True
    else:
        return False

def rect_circle_overlap(rect, circle):
    """Checks whether any corners of a rect fall in/on a circle.
    rect: Rectangle object
    circle: Circle object
    """
    p = copy.copy(rect.corner)
    if point_in_circle(p, circle):
        return True

    p.x += rect.width
    if point_in_circle(p, circle):
        return True

    p.y -= rect.height
    if point_in_circle(p, circle):
        return True

    p.x -= rect.width
    if point_in_circle(p, circle):
        return True

    return False

def main():
    box = Rectangle()
    box.width = 100.0
    box.height = 200.0
    box.corner = Point()
    box.corner.x = 50.0
    box.corner.y = 50.0

    circle = Circle
    circle.center = Point()
    circle.center.x = 150.0
    circle.center.y = 100.0
    circle.radius = 75.0

    print(point_in_circle(box.corner, circle))
    print(rect_in_circle(box, circle))
    print(rect_circle_overlap(box, circle))

    if __name__ == '__main__':
        main()
